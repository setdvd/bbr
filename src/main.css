/*
  elm-hot creates an additional div wrapper around the app to make HMR possible.
  This could break styling in development mode if you are using Elm UI.

  More context in the issue:
    https://github.com/halfzebra/create-elm-app/issues/320
*/
[data-elm-hot="true"] {
    height: inherit;
}

/*progress icon */

.progress_icon {
    animation: rotate 2s linear infinite;
    position: relative;
}

.progress_circle {
    stroke-dasharray: 1, 200;
    stroke-dashoffset: 0;
    animation: dash 2s ease-in-out infinite;
    stroke-linecap: round;
}

.skeleton {
    overflow: hidden;
    mask-image: radial-gradient(white, black);
}

.skeleton:after {
    content: '';
    display: block;
    width: 100%;
    height: 100%;
    background-image: linear-gradient(
            90deg,
            rgba(255, 255, 255, 0),
            rgba(255, 255, 255, 0.5),
            rgba(255, 255, 255, 0)
    );
    transform: translateX(-100%);
    animation-name: skeleton;
    animation-duration: 1.5s;
    animation-iteration-count: infinite;
    animation-timing-function: cubic-bezier(0.15, 0.5, 0.5, 1);
}

@keyframes skeleton {
    50%, 100% {
        transform: translateX(100%);
    }
}

@keyframes rotate{
    100%{
        transform: rotate(360deg);
    }
}
@keyframes dash{
    0%{
        stroke-dasharray: 1,200;
        stroke-dashoffset: 0;
    }
    50%{
        stroke-dasharray: 89,200;
        stroke-dashoffset: -30;
    }
    100%{
        stroke-dasharray: 89,200;
        stroke-dashoffset: -124;
    }
}

/* inputs */

.input .label {
  transform-origin: left center;
  transform: translateY(60%);
  transition: transform 300ms cubic-bezier(0.15, 0.5, 0.5, 1)
}
.input:focus-within .label {
  transform: scale(0.75);
  color: rgb(6, 102, 235);
}

.input:focus-within .placeholder {
  visibility: visible;
}

.input .placeholder {
  visibility: hidden;
}

.status-border {
    transform: scaleX(0);
    transform-origin: left center;
    transition: transform 300ms cubic-bezier(0.15, 0.5, 0.5, 1)
}

.input:focus-within .status-border {
    transform: scaleX(1)
}
